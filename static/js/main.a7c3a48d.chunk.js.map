{"version":3,"sources":["SquareBoxes.tsx","Board.tsx","hooks/useBoard.ts","TicTacToe.tsx","App.tsx","index.tsx"],"names":["wrapperCss","minHeight","height","width","border","SquareBoxes","value","handleOnClick","style","onClick","color","margin","display","boardCss","justifyContent","maxWidth","Board","currBoard","winner","map","idx","ans","useBoard","React","useState","Array","fill","boardState","setBoardState","setWinner","isCurrPlayerX","setIsCurrPlayerX","isTie","every","val","updateBoard","position","board","modifiedBoard","b","some","first","second","third","resetGame","TicTacToe","Fragment","flexDirection","alignItems","background","padding","App","className","rootElement","document","getElementById","render"],"mappings":"+KAEMA,EAAa,CACjBC,UAAW,OACXC,OAAQ,OACRC,MAAO,OACPC,OAAQ,kBAQGC,EAAc,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,cACnC,OACE,qBAAKC,MAAOR,EAAYS,QAASF,EAAjC,SACE,sBACEC,MAAO,CACLE,MAAO,MACPC,OAAQ,OACRC,QAAS,QAJb,SAOGN,OCrBHO,EAAW,CACfD,QAAS,OACTE,eAAgB,SAChBC,SAAU,QACV,YAAa,QAUFC,EAAQ,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,UAAWV,EAAwC,EAAxCA,cAAeW,EAAyB,EAAzBA,OAChD,OACE,qBAAKV,MAAOK,EAAZ,SACGI,EAAUE,KAAI,SAACb,EAAOc,GAAR,OACb,cAAC,EAAD,CAEEd,MAAOA,EACPC,cAAe,WACTW,GAAUZ,GAGdC,EAAca,KANXA,S,OCpBTC,EAAM,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAYIC,EAAW,WACtB,MAAoCC,IAAMC,UAAS,kBACjD,IAAIC,MAAM,GAAGC,KAAK,SADpB,mBAAOC,EAAP,KAAmBC,EAAnB,KAGA,EAA4BL,IAAMC,SAAwB,MAA1D,mBAAON,EAAP,KAAeW,EAAf,KACA,EAA0CN,IAAMC,UAAS,GAAzD,mBAAOM,EAAP,KAAsBC,EAAtB,KAeMC,GAASd,GAAUS,EAAWM,OAAM,SAACC,GAAD,OAASA,KAMnD,MAAO,CAAEP,aAAYT,SAAQY,gBAAeK,YApBxB,SAACC,GACnB,IAhBiBC,EAgBXH,EAAMJ,EAAgB,IAAM,IAC5BQ,EAAgBX,EAAWR,KAAI,SAACoB,EAAGnB,GACvC,OAAIA,IAAQgB,EACHF,EAEFK,KAETX,EAAcU,GACdP,GAAkBD,GAxBDO,EAyBDC,EAxBXjB,EAAImB,MACT,mCAAEC,EAAF,KAASC,EAAT,KAAiBC,EAAjB,YACEN,EAAMI,IACNJ,EAAMI,KAAWJ,EAAMK,IACvBL,EAAMI,KAAWJ,EAAMM,OAqBvBd,EAAUK,IAS2CF,QAAOY,UAL9C,WAChBhB,EAAc,IAAIH,MAAM,GAAGC,KAAK,OAChCG,EAAU,MACVE,GAAiB,MC1CRc,EAAY,WACvB,MAOIvB,IANFK,EADF,EACEA,WACAiB,EAFF,EAEEA,UACA1B,EAHF,EAGEA,OACAY,EAJF,EAIEA,cACAK,EALF,EAKEA,YACAH,EANF,EAMEA,MAmBF,OACE,eAAC,IAAMc,SAAP,WACE,qBACEtC,MAAO,CACLI,QAAS,OACTmC,cAAe,SACf7C,OAAQ,QACRY,eAAgB,gBAChBkC,WAAY,UANhB,SASE,cAAC,EAAD,CACE/B,UAAWU,EACXpB,cAAe4B,EACfjB,OAAQA,EACRY,cAAeA,OAGjBZ,GAAU,0CAAaY,EAAgB,IAAM,IAAnC,aAjCVE,EAEA,8BACE,0GAMFd,EACK,0CAAaA,EAAb,qBAEF,6DAuBL,wBAAQT,QAASmC,EAAWpC,MAAO,CAACyC,WAAW,OAAQvC,MAAM,OAAQwC,QAAS,OAAQvC,OAAQ,QAA9F,iCCpCS,SAASwC,IACtB,OACE,sBAAKC,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,OCbN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACL,EAAD,IAASE,I","file":"static/js/main.a7c3a48d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst wrapperCss = {\r\n  minHeight: \"50px\",\r\n  height: \"150x\",\r\n  width: \"50px\",\r\n  border: \"1px solid blue\"\r\n};\r\n\r\ninterface SquareBoxesProps {\r\n  value: number;\r\n  handleOnClick?: () => void;\r\n}\r\n\r\nexport const SquareBoxes = ({ value, handleOnClick }: SquareBoxesProps) => {\r\n  return (\r\n    <div style={wrapperCss} onClick={handleOnClick}>\r\n      <span\r\n        style={{\r\n          color: \"red\",\r\n          margin: \"16px\",\r\n          display: \"flex\"\r\n        }}\r\n      >\r\n        {value}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { SquareBoxes } from \"./SquareBoxes\";\r\n\r\nconst boardCss = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  maxWidth: \"200px\",\r\n  \"flex-wrap\": \"wrap\"\r\n};\r\n\r\ninterface BoardProps {\r\n  currBoard: number[];\r\n  handleOnClick: (position: number) => void;\r\n  winner: string | null;\r\n  isCurrPlayerX: boolean;\r\n}\r\n\r\nexport const Board = ({ currBoard, handleOnClick, winner }: BoardProps) => {\r\n  return (\r\n    <div style={boardCss}>\r\n      {currBoard.map((value, idx) => (\r\n        <SquareBoxes\r\n          key={idx}\r\n          value={value}\r\n          handleOnClick={() => {\r\n            if (winner || value) {\r\n              return;\r\n            }\r\n            handleOnClick(idx);\r\n          }}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst ans = [\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6]\r\n];\r\n\r\nconst checkWinner = (board: number[]) => {\r\n  return ans.some(\r\n    ([first, second, third]) =>\r\n      board[first] &&\r\n      board[first] === board[second] &&\r\n      board[first] === board[third]\r\n  );\r\n};\r\n\r\nexport const useBoard = () => {\r\n  const [boardState, setBoardState] = React.useState(() =>\r\n    new Array(9).fill(null)\r\n  );\r\n  const [winner, setWinner] = React.useState<string | null>(null);\r\n  const [isCurrPlayerX, setIsCurrPlayerX] = React.useState(false);\r\n  const updateBoard = (position: number) => {\r\n    const val = isCurrPlayerX ? \"X\" : \"O\";\r\n    const modifiedBoard = boardState.map((b, idx) => {\r\n      if (idx === position) {\r\n        return val;\r\n      }\r\n      return b;\r\n    });\r\n    setBoardState(modifiedBoard);\r\n    setIsCurrPlayerX(!isCurrPlayerX);\r\n    if (checkWinner(modifiedBoard)) {\r\n      setWinner(val);\r\n    }\r\n  };\r\n  const isTie = !winner && boardState.every((val) => val);\r\n  const resetGame = () => {\r\n    setBoardState(new Array(9).fill(null));\r\n    setWinner(null);\r\n    setIsCurrPlayerX(false);\r\n  };\r\n  return { boardState, winner, isCurrPlayerX, updateBoard, isTie, resetGame };\r\n};\r\n","import React from \"react\";\r\nimport { Board } from \"./Board\";\r\nimport { useBoard } from \"./hooks/useBoard\";\r\n\r\nexport const TicTacToe = () => {\r\n  const {\r\n    boardState,\r\n    resetGame,\r\n    winner,\r\n    isCurrPlayerX,\r\n    updateBoard,\r\n    isTie\r\n  } = useBoard();\r\n\r\n  const renderWinnerDetails = () => {\r\n    if (isTie) {\r\n      return (\r\n        <div>\r\n          <span>\r\n            Match is drawn, please restart the game by clicking the below button\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n    if (winner) {\r\n      return <div>Player {winner} wins the game.</div>;\r\n    }\r\n    return <div>Game is still in progress.</div>;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          height: \"200px\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <Board\r\n          currBoard={boardState}\r\n          handleOnClick={updateBoard}\r\n          winner={winner}\r\n          isCurrPlayerX={isCurrPlayerX}\r\n        />\r\n      </div>\r\n      {!winner && <div>Player {isCurrPlayerX ? \"X\" : \"O\"}'s turn</div>}\r\n      {renderWinnerDetails()}\r\n      <button onClick={resetGame} style={{background:\"blue\", color:'#fff', padding: '10px', margin: '10px'}}> Reset the game</button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { TicTacToe } from \"./TicTacToe\";\r\n\r\n/**\r\n *\r\n * Requirements:\r\n * A board\r\n * Squares in a board\r\n * players state\r\n * calculate winner strategy\r\n * reset game\r\n * check if its a tie\r\n */\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Tic Tac Toe</h1>\r\n      <TicTacToe />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}